{"ast":null,"code":"var _jsxFileName = \"/Users/Ana/Adalab/ejercicios-de-adalab/Mo\\u0301dulo 3 - React/React - leccio\\u0301n 4.3 - ejercicio 3/src/components/App.js\",\n    _s = $RefreshSig$();\n\n// Fichero src/components/App.js\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Crearmos las series en el estado indicando el array inicial\n  const [series, setSeries] = useState([{\n    id: '123',\n    name: 'Juego de tronos'\n  }, {\n    id: '456',\n    name: 'Las chicas Gilmore'\n  }, {\n    id: '678',\n    name: 'Gambita de Dama'\n  }]);\n  const [favorites, setFavorites] = useState([]);\n\n  const handleFavorites = () => {\n    const favSeries = series.filter(serie => serie.isFavorite === true);\n    setFavorites([...favorites, favSeries]);\n  }; // Función manejadora que se ejecuta cuando la usuaria pulsa en una serie\n\n\n  const handleFavorite = ev => {\n    // Obtenemos el id de la serie pintada. Este id lo estamos renderizando dentro del map\n    // Por cierto aquí solo puedo usar currentTarget y no target porque quiero leer el id de li escuchado\n    const clickedSerieId = ev.currentTarget.id; // Buscamos la serie pulsada\n\n    const foundSerie = series.find(serie => serie.id === clickedSerieId); // Invertimos la propiedad de serie pintada, si antes era false ahora es true y viceversa\n\n    foundSerie.isFavorite = !foundSerie.isFavorite; // Guardamos las series en el estado usando spread (lo explicamos más abajo)\n\n    setSeries([...series]);\n  };\n\n  const renderSeries = () => {\n    return series.map(serie => {\n      return (\n        /*#__PURE__*/\n        // Renderizamos cada serie añdiendo el atributo id\n        _jsxDEV(\"li\", {\n          id: serie.id,\n          onClick: handleFavorite,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: serie.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            onclick: handleFavorites,\n            children: [\"Es mi serie favorita: \", serie.isFavorite ? 'Sí' : 'No']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 6\n          }, this)]\n        }, serie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 5\n        }, this)\n      );\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista de series favoritas:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderSeries()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"CuOmqX7ApuVpEC09N63trb0AgNk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Ana/Adalab/ejercicios-de-adalab/Módulo 3 - React/React - lección 4.3 - ejercicio 3/src/components/App.js"],"names":["useState","App","series","setSeries","id","name","favorites","setFavorites","handleFavorites","favSeries","filter","serie","isFavorite","handleFavorite","ev","clickedSerieId","currentTarget","foundSerie","find","renderSeries","map"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACjB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CACpC;AAAEI,IAAAA,EAAE,EAAE,KAAN;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GADoC,EAEpC;AAAED,IAAAA,EAAE,EAAE,KAAN;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAFoC,EAGpC;AAAED,IAAAA,EAAE,EAAE,KAAN;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAHoC,CAAD,CAApC;AAKA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMQ,eAAe,GAAG,MAAM;AAC7B,UAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAP,CAAeC,KAAD,IAAWA,KAAK,CAACC,UAAN,KAAqB,IAA9C,CAAlB;AACAL,IAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAeG,SAAf,CAAD,CAAZ;AACA,GAHD,CATiB,CAajB;;;AACA,QAAMI,cAAc,GAAIC,EAAD,IAAQ;AAC9B;AACA;AACA,UAAMC,cAAc,GAAGD,EAAE,CAACE,aAAH,CAAiBZ,EAAxC,CAH8B,CAI9B;;AACA,UAAMa,UAAU,GAAGf,MAAM,CAACgB,IAAP,CAAaP,KAAD,IAAWA,KAAK,CAACP,EAAN,KAAaW,cAApC,CAAnB,CAL8B,CAM9B;;AACAE,IAAAA,UAAU,CAACL,UAAX,GAAwB,CAACK,UAAU,CAACL,UAApC,CAP8B,CAQ9B;;AACAT,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,CAAD,CAAT;AACA,GAVD;;AAYA,QAAMiB,YAAY,GAAG,MAAM;AAC1B,WAAOjB,MAAM,CAACkB,GAAP,CAAYT,KAAD,IAAW;AAC5B;AAAA;AACC;AACA;AAAmB,UAAA,EAAE,EAAEA,KAAK,CAACP,EAA7B;AAAiC,UAAA,OAAO,EAAES,cAA1C;AAAA,kCACC;AAAA,sBAAKF,KAAK,CAACN;AAAX;AAAA;AAAA;AAAA;AAAA,kBADD,eAGC;AAAG,YAAA,OAAO,EAAEG,eAAZ;AAAA,iDACwBG,KAAK,CAACC,UAAN,GAAmB,IAAnB,GAA0B,IADlD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHD;AAAA,WAASD,KAAK,CAACP,EAAf;AAAA;AAAA;AAAA;AAAA;AAFD;AAUA,KAXM,CAAP;AAYA,GAbD;;AAeA,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,gBAAKe,YAAY;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAMA,CA/CD;;GAAMlB,G;;KAAAA,G;AAiDN,eAAeA,GAAf","sourcesContent":["// Fichero src/components/App.js\nimport { useState } from 'react';\n\nconst App = () => {\n\t// Crearmos las series en el estado indicando el array inicial\n\tconst [series, setSeries] = useState([\n\t\t{ id: '123', name: 'Juego de tronos' },\n\t\t{ id: '456', name: 'Las chicas Gilmore' },\n\t\t{ id: '678', name: 'Gambita de Dama' },\n\t]);\n\tconst [favorites, setFavorites] = useState([]);\n\n\tconst handleFavorites = () => {\n\t\tconst favSeries = series.filter((serie) => serie.isFavorite === true);\n\t\tsetFavorites([...favorites, favSeries]);\n\t};\n\t// Función manejadora que se ejecuta cuando la usuaria pulsa en una serie\n\tconst handleFavorite = (ev) => {\n\t\t// Obtenemos el id de la serie pintada. Este id lo estamos renderizando dentro del map\n\t\t// Por cierto aquí solo puedo usar currentTarget y no target porque quiero leer el id de li escuchado\n\t\tconst clickedSerieId = ev.currentTarget.id;\n\t\t// Buscamos la serie pulsada\n\t\tconst foundSerie = series.find((serie) => serie.id === clickedSerieId);\n\t\t// Invertimos la propiedad de serie pintada, si antes era false ahora es true y viceversa\n\t\tfoundSerie.isFavorite = !foundSerie.isFavorite;\n\t\t// Guardamos las series en el estado usando spread (lo explicamos más abajo)\n\t\tsetSeries([...series]);\n\t};\n\n\tconst renderSeries = () => {\n\t\treturn series.map((serie) => {\n\t\t\treturn (\n\t\t\t\t// Renderizamos cada serie añdiendo el atributo id\n\t\t\t\t<li key={serie.id} id={serie.id} onClick={handleFavorite}>\n\t\t\t\t\t<h2>{serie.name}</h2>\n\t\t\t\t\t{/* Pintamos si cada serie es favorita usando el atributo isFavorite */}\n\t\t\t\t\t<p onclick={handleFavorites}>\n\t\t\t\t\t\tEs mi serie favorita: {serie.isFavorite ? 'Sí' : 'No'}\n\t\t\t\t\t</p>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Lista de series favoritas:</h1>\n\t\t\t<ul>{renderSeries()}</ul>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}