{"ast":null,"code":"var _jsxFileName = \"/Users/Ana/Adalab/ejercicios-de-adalab/Mo\\u0301dulo 3 - React/React - leccio\\u0301n 2.4 - ejemplo calculadora/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Creamos la constante de estado numberA y la función para modificarla setNumberA.\n  // El valor inicial que va a tener numberA es 0.\n  const [numberA, setNumberA] = useState(0); // Creamos la constante de estado numberB y la función para modificarla setNumberB.\n  // El valor inicial que va a tener numberB también es 0.\n\n  const [numberB, setNumberB] = useState(0); // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del primer número.\n\n  const handleNumberA = ev => {\n    // Cogemos el valor del input del primer número.\n    const inputValue = ev.target.value; // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n    // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n\n    setNumberA(inputValue);\n  }; // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del segundo número.\n\n\n  const handleNumberB = ev => {\n    // Hacemos lo mismo que en la función manejadora anterior, pero con setNumberB y en una sola línea.\n    setNumberB(ev.target.value);\n  }; // Creamos la constante total con la suma de los dos números.\n  // Esta línea de código es JS normal y corriente, no tiene nada que ver con React.\n\n\n  const total = parseInt(numberA) + parseInt(numberB); // Retornamos todo el código HTML que queremos que React pinte en la página.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"La calculadora:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Escribe un n\\xFAmero:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"name\",\n          onChange: handleNumberA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Escribe otro n\\xFAmero:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"email\",\n          onChange: handleNumberB\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"La suma de \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: numberA\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }, this), \" y \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: numberB\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 45\n      }, this), \" es\", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\" \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"VbAbA694wr4TTTdmRwX9GY7Qqeg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Ana/Adalab/ejercicios-de-adalab/Módulo 3 - React/React - lección 2.4 - ejemplo calculadora/src/components/App.js"],"names":["useState","App","numberA","setNumberA","numberB","setNumberB","handleNumberA","ev","inputValue","target","value","handleNumberB","total","parseInt"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd;AACA;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,CAAD,CAAtC,CAHc,CAId;AACA;;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAAD,CAAtC,CANc,CAQd;;AACA,QAAMM,aAAa,GAAIC,EAAD,IAAQ;AAC7B;AACA,UAAMC,UAAU,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAA7B,CAF6B,CAG7B;AACA;AACA;;AACAP,IAAAA,UAAU,CAACK,UAAD,CAAV;AACA,GAPD,CATc,CAkBd;;;AACA,QAAMG,aAAa,GAAIJ,EAAD,IAAQ;AAC7B;AACAF,IAAAA,UAAU,CAACE,EAAE,CAACE,MAAH,CAAUC,KAAX,CAAV;AACA,GAHD,CAnBc,CAwBd;AACA;;;AACA,QAAME,KAAK,GAAGC,QAAQ,CAACX,OAAD,CAAR,GAAoBW,QAAQ,CAACT,OAAD,CAA1C,CA1Bc,CA4Bd;;AACA,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,8BACC;AAAA,yDAGC;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAC,MAA1B;AAAiC,UAAA,QAAQ,EAAEE;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAMC;AAAA,2DAGC;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAC,OAA1B;AAAkC,UAAA,QAAQ,EAAEK;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cAND;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD,eAcC;AAAA,6CAEY;AAAA,kBAAST;AAAT;AAAA;AAAA;AAAA;AAAA,cAFZ,sBAEyC;AAAA,kBAASE;AAAT;AAAA;AAAA;AAAA;AAAA,cAFzC,sBAIC;AAAA,wBAAUQ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YAdD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAuBA;;GApDQX,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import { useState } from 'react';\n\nfunction App() {\n\t// Creamos la constante de estado numberA y la función para modificarla setNumberA.\n\t// El valor inicial que va a tener numberA es 0.\n\tconst [numberA, setNumberA] = useState(0);\n\t// Creamos la constante de estado numberB y la función para modificarla setNumberB.\n\t// El valor inicial que va a tener numberB también es 0.\n\tconst [numberB, setNumberB] = useState(0);\n\n\t// Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del primer número.\n\tconst handleNumberA = (ev) => {\n\t\t// Cogemos el valor del input del primer número.\n\t\tconst inputValue = ev.target.value;\n\t\t// Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n\t\t// Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n\t\t// Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n\t\tsetNumberA(inputValue);\n\t};\n\n\t// Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del segundo número.\n\tconst handleNumberB = (ev) => {\n\t\t// Hacemos lo mismo que en la función manejadora anterior, pero con setNumberB y en una sola línea.\n\t\tsetNumberB(ev.target.value);\n\t};\n\n\t// Creamos la constante total con la suma de los dos números.\n\t// Esta línea de código es JS normal y corriente, no tiene nada que ver con React.\n\tconst total = parseInt(numberA) + parseInt(numberB);\n\n\t// Retornamos todo el código HTML que queremos que React pinte en la página.\n\treturn (\n\t\t<div>\n\t\t\t<h1>La calculadora:</h1>\n\t\t\t<form>\n\t\t\t\t<label>\n\t\t\t\t\tEscribe un número:\n\t\t\t\t\t{/* En esta línea indicamos que cuando cambie el input se ejecute la función manejadora handleNumberA */}\n\t\t\t\t\t<input type=\"number\" name=\"name\" onChange={handleNumberA} />\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\tEscribe otro número:\n\t\t\t\t\t{/* En esta línea indicamos que cuando cambie el input se ejecute la función manejadora handleNumberB */}\n\t\t\t\t\t<input type=\"number\" name=\"email\" onChange={handleNumberB} />\n\t\t\t\t</label>\n\t\t\t</form>\n\t\t\t<p>\n\t\t\t\t{/* En esta línea usamos las constantes numberA y numberB creadas con el estado de React para pintar el HTML. */}\n\t\t\t\tLa suma de <strong>{numberA}</strong> y <strong>{numberB}</strong> es\n\t\t\t\t{/* En esta línea usamos la constante total que hemos creado por nosotras para pintar el HTML. */}\n\t\t\t\t<strong> {total}</strong>.\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}