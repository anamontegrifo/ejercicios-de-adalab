{"ast":null,"code":"var _jsxFileName = \"/Users/Ana/Adalab/ejercicios-de-adalab/Mo\\u0301dulo 3 - React/React - leccio\\u0301n 5.2/src/components/App.js\",\n    _s = $RefreshSig$();\n\n// Fichero src/components/App.js\nimport { useEffect, useState } from 'react';\nimport callToApi from '../services/api'; // Importamos el servicio que acabamos de crear\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Estados\n  // Creamos characters para guardar los personajes respondidos por el API, por eso es un array vacío\n  const [characters, setCharacters] = useState([]); // Creamos searchName para gestionar el input de búsqueda, por eso es un string vacío\n\n  const [searchName, setSearchName] = useState(''); // useEffect\n\n  useEffect(() => {\n    // Aquí podemos poner código JS, por ejemplo podríamos llamar a callToApi dentro de un if\n    // Llamamos al API pasando por parámetros el searchName\n    callToApi(searchName).then(response => {\n      // Cuando el API responde guardamos los personajes en el estado\n      setCharacters(response);\n    }); // Este useEffect depende de searchName por eso ponemos [searchName]\n    // Cuando la usuaria cambia el searchName este useEffect se vuelve a ejecutar porque necesitamos llamar otra vez al API para obtener nuevos datos\n  }, [searchName]); // Eventos\n\n  const handleSearchName = ev => {\n    // Cuando la usuaria cambia el input guardamos su valor en el estado\n    setSearchName(ev.target.value);\n  }; // Renderizado\n\n\n  const renderCharacters = () => {\n    // Pintamos el listado de personajes respondido por el API\n    return characters.map((character, index) => {\n      // El API no nos devuelve un id para cada personaje, por eso usamos el index que nos da el map\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Nombre: \", character.name]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Llamar al API de Star Wars\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Caracter\\xEDsticas de \", starWarsData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"A\\xF1o de nacimiento: \", starWarsData.birthYear]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Estatura: \", starWarsData.height, \" cm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Peso: \", starWarsData.mass, \" Kg\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Color de ojos: \", starWarsData.eyeColor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"rJ983bLlbXl3CttI/sZBgFtQZ4w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Ana/Adalab/ejercicios-de-adalab/Módulo 3 - React/React - lección 5.2/src/components/App.js"],"names":["useEffect","useState","callToApi","App","characters","setCharacters","searchName","setSearchName","then","response","handleSearchName","ev","target","value","renderCharacters","map","character","index","name","starWarsData","birthYear","height","mass","eyeColor"],"mappings":";;;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,iBAAtB,C,CAAyC;;;;AAEzC,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACjB;AAEA;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C,CAJiB,CAKjB;;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C,CANiB,CAQjB;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf;AAEA;AACAE,IAAAA,SAAS,CAACI,UAAD,CAAT,CAAsBE,IAAtB,CAA4BC,QAAD,IAAc;AACxC;AACAJ,MAAAA,aAAa,CAACI,QAAD,CAAb;AACA,KAHD,EAJe,CAQf;AACA;AACA,GAVQ,EAUN,CAACH,UAAD,CAVM,CAAT,CAViB,CAsBjB;;AAEA,QAAMI,gBAAgB,GAAIC,EAAD,IAAQ;AAChC;AACAJ,IAAAA,aAAa,CAACI,EAAE,CAACC,MAAH,CAAUC,KAAX,CAAb;AACA,GAHD,CAxBiB,CA6BjB;;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC9B;AACA,WAAOV,UAAU,CAACW,GAAX,CAAe,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AAC3C;AACA,0BAAO;AAAA,+BAAyBD,SAAS,CAACE,IAAnC;AAAA,SAASD,KAAT;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAHM,CAAP;AAIA,GAND;;AAQA,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,2CAAwBE,YAAY,CAACD,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD,eAIC;AAAA,8BACC;AAAA,6CAAwBC,YAAY,CAACC,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA,iCAAeD,YAAY,CAACE,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAA,6BAAWF,YAAY,CAACG,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC;AAAA,sCAAoBH,YAAY,CAACI,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAaA,CApDD;;GAAMpB,G;;KAAAA,G;AAsDN,eAAeA,GAAf","sourcesContent":["// Fichero src/components/App.js\nimport { useEffect, useState } from 'react';\nimport callToApi from '../services/api'; // Importamos el servicio que acabamos de crear\n\nconst App = () => {\n\t// Estados\n\n\t// Creamos characters para guardar los personajes respondidos por el API, por eso es un array vacío\n\tconst [characters, setCharacters] = useState([]);\n\t// Creamos searchName para gestionar el input de búsqueda, por eso es un string vacío\n\tconst [searchName, setSearchName] = useState('');\n\n\t// useEffect\n\n\tuseEffect(() => {\n\t\t// Aquí podemos poner código JS, por ejemplo podríamos llamar a callToApi dentro de un if\n\n\t\t// Llamamos al API pasando por parámetros el searchName\n\t\tcallToApi(searchName).then((response) => {\n\t\t\t// Cuando el API responde guardamos los personajes en el estado\n\t\t\tsetCharacters(response);\n\t\t});\n\t\t// Este useEffect depende de searchName por eso ponemos [searchName]\n\t\t// Cuando la usuaria cambia el searchName este useEffect se vuelve a ejecutar porque necesitamos llamar otra vez al API para obtener nuevos datos\n\t}, [searchName]);\n\n\t// Eventos\n\n\tconst handleSearchName = (ev) => {\n\t\t// Cuando la usuaria cambia el input guardamos su valor en el estado\n\t\tsetSearchName(ev.target.value);\n\t};\n\n\t// Renderizado\n\n\tconst renderCharacters = () => {\n\t\t// Pintamos el listado de personajes respondido por el API\n\t\treturn characters.map((character, index) => {\n\t\t\t// El API no nos devuelve un id para cada personaje, por eso usamos el index que nos da el map\n\t\t\treturn <li key={index}>Nombre: {character.name}</li>;\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Llamar al API de Star Wars</h1>\n\t\t\t<h2>Características de {starWarsData.name}</h2>\n\n\t\t\t<ul>\n\t\t\t\t<li>Año de nacimiento: {starWarsData.birthYear}</li>\n\t\t\t\t<li>Estatura: {starWarsData.height} cm</li>\n\t\t\t\t<li>Peso: {starWarsData.mass} Kg</li>\n\t\t\t\t<li>Color de ojos: {starWarsData.eyeColor}</li>\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}