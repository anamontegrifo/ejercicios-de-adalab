{"ast":null,"code":"var _jsxFileName = \"/Users/Ana/Adalab/ejercicios-de-adalab/Mo\\u0301dulo 3 - React/React - leccio\\u0301n 4.3 - ejercicio 1 y 2/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport '../styles/App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([{\n    task: 'Comprar harina, jamón y pan rallado',\n    completed: true\n  }, {\n    task: 'Hacer croquetas ricas',\n    completed: true\n  }, {\n    task: 'Ir a la puerta de un gimnasio',\n    completed: false\n  }, {\n    task: 'Comerme las croquetas mirando a la gente que entra en el gimnasio',\n    completed: false\n  }]);\n  const totalTasks = tasks.length;\n  const completedTasks = tasks.filter(task => task.completed === true);\n  console.log(completedTasks.length);\n  console.log(completedTasks); // const unfinishedTasks =;\n\n  const [searchTask, setSearchTask] = useState('');\n\n  const handleSearch = event => {\n    setSearchTask(event.target.value);\n  };\n\n  const handleClicked = event => {\n    /* Aquí guardamos la id del elemento clickado, se la pusimos en la función render al generar los <li> */\n    const id = event.currentTarget.id;\n    /* Aplicamos el valor contrario a lo que tenemos en el momento de clickar*/\n\n    tasks[id].completed = !tasks[id].completed;\n    setTasks([...tasks]);\n  };\n\n  const renderTasks = () => {\n    return tasks\n    /* Primero filtramos por la búsqueda en el input, nos da todas las tasks que incluyan las letras que escribimos en el input*/\n    .filter(task => {\n      return task.task.toLowerCase().includes(searchTask.toLowerCase());\n    })\n    /* Este es el map que nos genera todos los li del array, después de hacer el filtro (si se hace)*/\n    .map((task, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: handleClicked,\n        id: index\n        /* Podemos concatenar una clase fija con una con condición*/\n        ,\n        className: `text ${task.completed ? 'completed' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 8\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista de tareas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"searchTask\",\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderTasks()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Tareas totales: \", totalTasks, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Tareas completadas: \", completedTasks.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Tareas pendientes: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"IgMmcT0JsFBpUoO9y11f3NAzWNY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Ana/Adalab/ejercicios-de-adalab/Módulo 3 - React/React - lección 4.3 - ejercicio 1 y 2/src/components/App.js"],"names":["useState","App","tasks","setTasks","task","completed","totalTasks","length","completedTasks","filter","console","log","searchTask","setSearchTask","handleSearch","event","target","value","handleClicked","id","currentTarget","renderTasks","toLowerCase","includes","map","index"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport '../styles/App.scss';\n\nfunction App() {\n\tconst [tasks, setTasks] = useState([\n\t\t{ task: 'Comprar harina, jamón y pan rallado', completed: true },\n\t\t{ task: 'Hacer croquetas ricas', completed: true },\n\t\t{ task: 'Ir a la puerta de un gimnasio', completed: false },\n\t\t{\n\t\t\ttask: 'Comerme las croquetas mirando a la gente que entra en el gimnasio',\n\t\t\tcompleted: false,\n\t\t},\n\t]);\n\n\tconst totalTasks = tasks.length;\n\tconst completedTasks = tasks.filter((task) => task.completed === true);\n\tconsole.log(completedTasks.length);\n\tconsole.log(completedTasks);\n\t// const unfinishedTasks =;\n\tconst [searchTask, setSearchTask] = useState('');\n\n\tconst handleSearch = (event) => {\n\t\tsetSearchTask(event.target.value);\n\t};\n\n\tconst handleClicked = (event) => {\n\t\t/* Aquí guardamos la id del elemento clickado, se la pusimos en la función render al generar los <li> */\n\t\tconst id = event.currentTarget.id;\n\t\t/* Aplicamos el valor contrario a lo que tenemos en el momento de clickar*/\n\t\ttasks[id].completed = !tasks[id].completed;\n\n\t\tsetTasks([...tasks]);\n\t};\n\n\tconst renderTasks = () => {\n\t\treturn (\n\t\t\ttasks\n\t\t\t\t/* Primero filtramos por la búsqueda en el input, nos da todas las tasks que incluyan las letras que escribimos en el input*/\n\t\t\t\t.filter((task) => {\n\t\t\t\t\treturn task.task.toLowerCase().includes(searchTask.toLowerCase());\n\t\t\t\t})\n\t\t\t\t/* Este es el map que nos genera todos los li del array, después de hacer el filtro (si se hace)*/\n\t\t\t\t.map((task, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tonClick={handleClicked}\n\t\t\t\t\t\t\tid={index}\n\t\t\t\t\t\t\t/* Podemos concatenar una clase fija con una con condición*/\n\t\t\t\t\t\t\tclassName={`text ${task.completed ? 'completed' : ''}`}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<p>{task.task}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t);\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<h1>Lista de tareas</h1>\n\t\t\t<form action=\"\">\n\t\t\t\t<input type=\"text\" id=\"searchTask\" onChange={handleSearch} />\n\t\t\t</form>\n\t\t\t<ul>{renderTasks()}</ul>\n\t\t\t<p>Tareas totales: {totalTasks} </p>\n\t\t\t<p>Tareas completadas: {completedTasks.length}</p>\n\t\t\t<p>Tareas pendientes: </p>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}